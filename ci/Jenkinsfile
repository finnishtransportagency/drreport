import groovy.json.JsonOutput

def get_environment() {
    if (BRANCH_NAME.equals("develop")) { return "dev" }
    if (BRANCH_NAME.equals("master")) { return "prod" }
    if (BRANCH_NAME.startsWith("release-")) { return "stg" }
    if (BRANCH_NAME.equals("jenkinsfile-temp")) { return "dev" } // temp branch
    return ""
}
def get_version_suffix() {
    if (get_environment().equals("dev")) { return "-SNAPSHOT" }
    if (get_environment().equals("prod")) { return "" }
    return "-${get_environment().toUpperCase()}-SNAPSHOT"
}
def notify(message,color) {
    slackSend(color: "${color}", message: "${JOB_NAME} - <${RUN_DISPLAY_URL}|${BUILD_DISPLAY_NAME}> - ${message}")
}
pipeline {
    agent any
    environment {
        NOTIFY_SLACK_SUBJECT = "${JOB_NAME} - <${RUN_DISPLAY_URL}|${BUILD_DISPLAY_NAME}>"
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: "25"))
        disableConcurrentBuilds()
    }
    stages {
        stage("Setup") {
            when {
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                script {

                    def pom = readMavenPom()

                    def deploy_target = get_environment()

                    def artifact_id = pom.artifactId
                    def artifact_version = "${pom.version}${get_version_suffix()}"
                    def group_id = pom.groupId
                    def extension = pom.packaging
                    def filename = "target/${artifact_id}-${artifact_version}.${extension}"
                    def repository_url = "http://livibuild03.vally.local/nexus/repository/ptp"

                    STAGE_ACK_PARAMETERS = [
                        choice(choices: deploy_target, description: "Deploy target.", name: "deploy_target"),
                        choice(choices: artifact_id, description: "Artifact ID", name: "artifact_id"),
                        choice(choices: artifact_version, description: "Artifact version", name: "artifact_version"),
                        choice(choices: group_id, description: "Group ID", name: "group_id")
                    ]

                    STAGE_PREPARE_CMD = [
                        "cd src/main/resources/static",
                        "npm install",
                        "npm run build",
                        "sleep 30" // watchify doesn't work without this
                    ].join(" && ")

                    STAGE_BUILD_CMD = [
                        [
                            "mvn",
                            "install:install-file",
                            "-Dfile=ojdbc14-10.2.0.4.0.jar",
                            "-DgroupId=com.oracle",
                            "-DartifactId=ojdbc14",
                            "-Dversion=10.2.0.4.0",
                            "-Dpackaging=jar"
                        ].join(" "),
                        [
                            "mvn",
                            "versions:set",
                            "-DnewVersion=${artifact_version}",
                            "--batch-mode"
                        ].join(" "),
                        [
                            "mvn",
                            "clean",
                            "install",
                            "--batch-mode"
                        ].join(" ")
                    ].join(" && ")

                    STAGE_CONFIRM_TEXT = "Create release ${group_id}:${artifact_id}@${artifact_version} and deploy to ${deploy_target}?"

                    STAGE_PUBLISH_CMD = [
                        "mvn",
                        "deploy:deploy-file",
                        "-Dfile=${filename}",
                        "-DpomFile=pom.xml",
                        "-DrepositoryId=nexus3",
                        "-Durl=${repository_url}",
                        "--batch-mode"
                    ].join(" ")

                    STAGE_DEPLOY_EXTRAVARS = [
                        oskari_deploy: JsonOutput.toJson([
                            artifact_id: artifact_id,
                            group_id: group_id,
                            extension: extension,
                            version: artifact_version,
                            repository_url: repository_url
                        ])
                    ]
                }
            }
        }
        stage("Ack") {
            agent none
            options {
                timeout(time: 5, unit: "MINUTES")
            }
            when {
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                slackSend(
                    color: "warning",
                    message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} requires acknowledgement! Visit <${RUN_DISPLAY_URL}|here> and verify!"
                )
                input(
                    message: "Proceed with following settings?",
                    parameters: STAGE_ACK_PARAMETERS
                )
            }
            post {
                aborted {
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} aborted because acknowledgement timeout exceeded or user action!"
                    )
                }
                failure {
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} aborted! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        stage("Docker") {
            when {
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                sh "cp /data1/ci/{maven,node,python}/* ci/confs/"
                script {
                    def jenkins_uid = sh(returnStdout: true, script: "id -u").trim()
                    def build_args = [
                        "--build-arg http_proxy=${http_proxy}",
                        "--build-arg https_proxy=${http_proxy}",
                        "--build-arg no_proxy=${no_proxy}",
                        "--build-arg JENKINS_UID=${jenkins_uid}"
                    ].join(" ")
                    docker.build(
                        "dr-maven",
                        "${build_args} -f ci/Dockerfile.maven ci"
                    )
                    docker.build(
                        "dr-node",
                        "${build_args} -f ci/Dockerfile.node ci"
                    )
                    docker.build(
                        "dr-python",
                        "${build_args} -f ci/Dockerfile.python ci"
                    )
                }
            }
            post {
                failure {
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        stage("Prepare") {
            agent {
                docker {
                    image "dr-node"
                    reuseNode true
                }
            }
            when {
                beforeAgent true
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                sh STAGE_PREPARE_CMD
            }
            post {
                failure {
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        stage("Build") {
            agent {
                docker {
                    image "dr-maven"
                    reuseNode true
                }
            }
            when {
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                sh STAGE_BUILD_CMD
            }
            post {
                failure {
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        stage("Confirm") {
            agent none
            options {
                timeout(time: 5, unit: "MINUTES")
            }
            when {
                beforeAgent true
                expression {
                    get_environment()?.trim()
                }
                not {
                    branch "develop"
                }
            }
            steps {
                slackSend(
                    color: "warning",
                    message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} requires confirmation! Visit <${RUN_DISPLAY_URL}|here> and verify!"
                )
                input STAGE_CONFIRM_TEXT
            }
            post {
                aborted {
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} aborted because confirmation timeout exceeded or user action!"
                    )
                }
                failure {
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        stage("Publish") {
            agent {
                docker {
                    image "dr-maven"
                    reuseNode true
                }
            }
            when {
                beforeAgent true
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                sh STAGE_PUBLISH_CMD
            }
            post {
                failure {
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        stage("Deploy") {
            when {
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                echo "deploy"
            }
            post {
                failure {
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT}\nStage ${STAGE_NAME} failure! Check <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
        stage("Test") {
            agent {
                docker {
                    image "dr-python"
                    reuseNode true
                }
            }
            when {
                expression {
                    get_environment()?.trim()
                }
            }
            steps {
                sh "pip --version"
            }
            post {
                failure {
                    slackSend(
                        color: "danger",
                        message: "${NOTIFY_SLACK_SUBJECT} - Stage ${STAGE_NAME} failure!\nCheck <${BUILD_URL}console|console>!"
                    )
                }
                unstable {
                    slackSend(
                        color: "warning",
                        message: "${NOTIFY_SLACK_SUBJECT} - Stage ${STAGE_NAME} failure!\nCheck <${BUILD_URL}console|console>!"
                    )
                }
            }
        }
    }
    post {
        always {
            slackSend(
                color: currentBuild.currentResult.equals("SUCCESS") ? "good" : "danger",
                message: "${NOTIFY_SLACK_SUBJECT}\nJob ${currentBuild.currentResult}! More info <${BUILD_URL}|here>."
            )
            deleteDir()
        }
    }
}
